package com.fint.tools.llvmir


enum TermOps(val opcode: Int) {
  case Ret extends TermOps(1)
  case Br extends TermOps(2)
  case Switch extends TermOps(3)
  case IndirectBr extends TermOps(4)
  case Invoke extends TermOps(5)
  case Resume extends TermOps(6)
  case Unreachable extends TermOps(7)
  case CleanupRet extends TermOps(8)
  case CatchRet extends TermOps(9)
  case CatchSwitch extends TermOps(10)
  case CallBr extends TermOps(11)
}

enum UnaryOps(val opcode: Int) {
  case FNeg extends UnaryOps(12)
}

enum BinaryOps(val opcode: Int) {
  case Add extends BinaryOps(13)
  case FAdd extends BinaryOps(14)
  case Sub extends BinaryOps(15)
  case FSub extends BinaryOps(16)
  case Mul extends BinaryOps(17)
  case FMul extends BinaryOps(18)
  case UDiv extends BinaryOps(19)
  case SDiv extends BinaryOps(20)
  case FDiv extends BinaryOps(21)
  case URem extends BinaryOps(22)
  case SRem extends BinaryOps(23)
  case FRem extends BinaryOps(24)
  case Shl extends BinaryOps(25)
  case LShr extends BinaryOps(26)
  case AShr extends BinaryOps(27)
  case And extends BinaryOps(28)
  case Or extends BinaryOps(29)
  case Xor extends BinaryOps(30)
}

enum MemoryOps(val opcode: Int) {
  case Alloca extends MemoryOps(31)
  case Load extends MemoryOps(32)
  case Store extends MemoryOps(33)
  case GetElementPtr extends MemoryOps(34)
  case Fence extends MemoryOps(35)
  case AtomicCmpXchg extends MemoryOps(36)
  case AtomicRMW extends MemoryOps(37)
}

enum CastOps(val opcode: Int) {
  case Trunc extends CastOps(38)
  case ZExt extends CastOps(39)
  case SExt extends CastOps(40)
  case FPToUI extends CastOps(41)
  case FPToSI extends CastOps(42)
  case UIToFP extends CastOps(43)
  case SIToFP extends CastOps(44)
  case FPTrunc extends CastOps(45)
  case FPExt extends CastOps(46)
  case PtrToInt extends CastOps(47)
  case IntToPtr extends CastOps(48)
  case BitCast extends CastOps(49)
  case AddrSpaceCast extends CastOps(50)
}

enum FuncletPadOps(val opcode: Int) {
  case CleanupPad extends FuncletPadOps(51)
  case CatchPad extends FuncletPadOps(52)
}

enum OtherOps(val opcode: Int) {
  case ICmp extends OtherOps(53)
  case FCmp extends OtherOps(54)
  case PHI extends OtherOps(55)
  case Call extends OtherOps(56)
  case Select extends OtherOps(57)
  case UserOp1 extends OtherOps(58)
  case UserOp2 extends OtherOps(59)
  case VAArg extends OtherOps(60)
  case ExtractElement extends OtherOps(61)
  case InsertElement extends OtherOps(62)
  case ShuffleVector extends OtherOps(63)
  case ExtractValue extends OtherOps(64)
  case InsertValue extends OtherOps(65)
  case LandingPad extends OtherOps(66)
}

enum OpsClass(val opcode: Int) {
  case TerminatorOps extends OpsClass(1)
  case UnaryOps extends OpsClass(2)
  case BinaryOps extends OpsClass(3)
  case MemoryOps extends OpsClass(4)
  case CastOps extends OpsClass(5)
  case FuncletPadOps extends OpsClass(6)
  case OtherOps extends OpsClass(7)
}

enum Ops(val opcode: Int, opsClass: OpsClass) {
  case Ret extends Ops(1, OpsClass.TerminatorOps)
  case Br extends Ops(2, OpsClass.TerminatorOps)
  case Switch extends Ops(3, OpsClass.TerminatorOps)
  case IndirectBr extends Ops(4, OpsClass.TerminatorOps)
  case Invoke extends Ops(5, OpsClass.TerminatorOps)
  case Resume extends Ops(6, OpsClass.TerminatorOps)
  case Unreachable extends Ops(7, OpsClass.TerminatorOps)
  case CleanupRet extends Ops(8, OpsClass.TerminatorOps)
  case CatchRet extends Ops(9, OpsClass.TerminatorOps)
  case CatchSwitch extends Ops(10, OpsClass.TerminatorOps)
  case CallBr extends Ops(11, OpsClass.TerminatorOps)
  case FNeg extends Ops(12, OpsClass.UnaryOps)
  case Add extends Ops(13, OpsClass.BinaryOps)
  case FAdd extends Ops(14, OpsClass.BinaryOps)
  case Sub extends Ops(15, OpsClass.BinaryOps)
  case FSub extends Ops(16, OpsClass.BinaryOps)
  case Mul extends Ops(17, OpsClass.BinaryOps)
  case FMul extends Ops(18, OpsClass.BinaryOps)
  case UDiv extends Ops(19, OpsClass.BinaryOps)
  case SDiv extends Ops(20, OpsClass.BinaryOps)
  case FDiv extends Ops(21, OpsClass.BinaryOps)
  case URem extends Ops(22, OpsClass.BinaryOps)
  case SRem extends Ops(23, OpsClass.BinaryOps)
  case FRem extends Ops(24, OpsClass.BinaryOps)
  case Shl extends Ops(25, OpsClass.BinaryOps)
  case LShr extends Ops(26, OpsClass.BinaryOps)
  case AShr extends Ops(27, OpsClass.BinaryOps)
  case And extends Ops(28, OpsClass.BinaryOps)
  case Or extends Ops(29, OpsClass.BinaryOps)
  case Xor extends Ops(30, OpsClass.BinaryOps)
  case Alloca extends Ops(31, OpsClass.MemoryOps)
  case Load extends Ops(32, OpsClass.MemoryOps)
  case Store extends Ops(33, OpsClass.MemoryOps)
  case GetElementPtr extends Ops(34, OpsClass.MemoryOps)
  case Fence extends Ops(35, OpsClass.MemoryOps)
  case AtomicCmpXchg extends Ops(36, OpsClass.MemoryOps)
  case AtomicRMW extends Ops(37, OpsClass.MemoryOps)
  case Trunc extends Ops(38, OpsClass.CastOps)
  case ZExt extends Ops(39, OpsClass.CastOps)
  case SExt extends Ops(40, OpsClass.CastOps)
  case FPToUI extends Ops(41, OpsClass.CastOps)
  case FPToSI extends Ops(42, OpsClass.CastOps)
  case UIToFP extends Ops(43, OpsClass.CastOps)
  case SIToFP extends Ops(44, OpsClass.CastOps)
  case FPTrunc extends Ops(45, OpsClass.CastOps)
  case FPExt extends Ops(46, OpsClass.CastOps)
  case PtrToInt extends Ops(47, OpsClass.CastOps)
  case IntToPtr extends Ops(48, OpsClass.CastOps)
  case BitCast extends Ops(49, OpsClass.CastOps)
  case AddrSpaceCast extends Ops(50, OpsClass.CastOps)
  case CleanupPad extends Ops(51, OpsClass.FuncletPadOps)
  case CatchPad extends Ops(52, OpsClass.FuncletPadOps)
  case ICmp extends Ops(53, OpsClass.OtherOps)
  case FCmp extends Ops(54, OpsClass.OtherOps)
  case PHI extends Ops(55, OpsClass.OtherOps)
  case Call extends Ops(56, OpsClass.OtherOps)
  case Select extends Ops(57, OpsClass.OtherOps)
  case UserOp1 extends Ops(58, OpsClass.OtherOps)
  case UserOp2 extends Ops(59, OpsClass.OtherOps)
  case VAArg extends Ops(60, OpsClass.OtherOps)
  case ExtractElement extends Ops(61, OpsClass.OtherOps)
  case InsertElement extends Ops(62, OpsClass.OtherOps)
  case ShuffleVector extends Ops(63, OpsClass.OtherOps)
  case ExtractValue extends Ops(64, OpsClass.OtherOps)
  case InsertValue extends Ops(65, OpsClass.OtherOps)
  case LandingPad extends Ops(66, OpsClass.OtherOps)
}


class Instruction(val ftype: FType, val itype: Int, val use: Use, val numOps: Int, val insertAtEnd: BasicBlock) extends Value(ftype) {
}
